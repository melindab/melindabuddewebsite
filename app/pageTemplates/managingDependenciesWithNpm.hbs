<div class="container">
    <h2>Managing Dependencies with NPM</h2>
    <p>
        Managing dependencies (libraries, frameworks, etc.) can quickly become complicated in large projects. NPM can be used to help control versions and automate installations of dependencies that have been published as NPM packages. Due to NPM's popularity, most dependencies you will use can be found as NPM packages.
    </p>
    <p>
        If you haven't already done so, install Node. Then create a file called <em>package.json</em> in your project folder using a text editor or IDE. Usually this is added to the top-level folder, or root directory. All content in the file must be JSON. The name and version properties (also called "fields") are required. Don't start the name with a dot or an underscore, and don't use uppercase letters or URL-unsafe characters. This is an example of a very simple <em>package.json</em> file:
    </p>
    <div class="boxed mb-blue lighten-2">
        <code>
            {<br>
            <span class="tab-1">"name": "appname",</span><br>
            <span class="tab-1">"version": "1.0.0"</span><br>
            }<br>
        </code>
    </div>
    <p>
        There are also two other properties you will need: dependencies and devDependencies. These will be created for you if you install dependencies using the --save or --save-dev flag, respectively. If a library or framework is needed in order for your application to run and should be deployed to a production server, it should be saved under <em>dependencies</em>. If it is a testing framework or other library that is only needed when developing, it should be saved under <em>devDependencies</em>.
    <p>
    <p>
        In your command line interface (CLI), change your current working directory to your project folder (or the folder that contains your <em>package.json</em> file). Enter the following commands into the command line to both install dependencies and save them:
    </p>
    <div class="boxed mb-blue lighten-2">
        <code>
            npm install package-name --save<br>
            npm install package-name --save-dev<br>
        </code>
    </div>
    <p>These commands will usually install the latest version of the package. To install and save a specific version of a dependency, enter the package name immediately followed by "@" and the version number:<p>
    <div class="boxed mb-blue lighten-2">
    <code>
        npm install package-name@1.0.0 --save
    </code>
    </div>
    <p>
        You should now have a node_modules folder in your sample_backbone_website folder, as well as dependencies and/or devDependencies added to you <em>package.json</em> file. You may want to add the folder to your project's .gitignore file so it doesn't get uploaded to your git repo. If you delete the node_modules folder, you can reinstall all your dependencies again by entering the following command in your CLI:
    </p>
    <div class="boxed mb-blue lighten-2">
        <code>
            npm install
        </code>
    </div>
    <p>
        See the <a href="https://docs.npmjs.com/files/package.json"><strong>NPM documentation</strong></a> for additional properties that can be added to the <em>package.json</em> file.
    </p>
<div>
